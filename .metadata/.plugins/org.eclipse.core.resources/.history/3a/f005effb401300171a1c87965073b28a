import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;

public class EditorWindow extends JFrame implements ActionListener, DocumentObserver, DocumentListener
{

    private JTextArea textArea;
    private JMenuBar menuBar;
    private JMenu fileDropDown, editDropDown, viewDropDown;
    private JScrollPane scpane;
    private JMenuItem exitItem, cutItem, copyItem, pasteItem, selectItem, saveItem, loadItem, statusItem;
    private String pad;
    private JToolBar toolBar;

    DocumentModel model;
    String lastRecordedText = null;

    public EditorWindow(DocumentModel model)
    {
        super("Text Editor");

        this.model = model;
        model.attach(this);

        setSize(1000, 1000);
        setLocationRelativeTo(null);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        Container pane = getContentPane();
        pane.setLayout(new BorderLayout());


        textArea = new JTextArea(); //textarea


        menuBar = new JMenuBar(); //menubar
        fileDropDown = new JMenu("File"); //file menu
        editDropDown = new JMenu("Edit"); //edit menu
        viewDropDown = new JMenu("View"); //edit menu
        exitItem = new JMenuItem("Exit");
        cutItem = new JMenuItem("Cut");
        copyItem = new JMenuItem("Copy");
        pasteItem = new JMenuItem("Paste");
        selectItem = new JMenuItem("Select All"); //menuitems
        saveItem = new JMenuItem("Save"); //menuitems
        loadItem = new JMenuItem("Load"); //menuitems
        statusItem = new JMenuItem("Status"); //menuitems

        scpane = new JScrollPane(textArea); //scrollpane  and add textarea to scrollpane

        toolBar = new JToolBar();

        textArea.setLineWrap(true);
        textArea.setWrapStyleWord(true);

        setJMenuBar(menuBar);
        menuBar.add(fileDropDown);
        menuBar.add(editDropDown);
        menuBar.add(viewDropDown);

        fileDropDown.add(saveItem);
        fileDropDown.add(loadItem);
        fileDropDown.add(exitItem);

        editDropDown.add(cutItem);
        editDropDown.add(copyItem);
        editDropDown.add(pasteItem);
        editDropDown.add(selectItem);

        viewDropDown.add(statusItem);


        pane.add(scpane, BorderLayout.CENTER);
        pane.add(toolBar, BorderLayout.SOUTH);

        saveItem.addActionListener(this);
        loadItem.addActionListener(this);
        exitItem.addActionListener(this);
        cutItem.addActionListener(this);
        copyItem.addActionListener(this);
        pasteItem.addActionListener(this);
        selectItem.addActionListener(this);
        statusItem.addActionListener(this);

        setVisible(true);
    }

    public void actionPerformed(ActionEvent e)
    {
        /*JMenuItem choice = (JMenuItem) e.getSource();
        if (choice == saveItem)
        {
            //not yet implmented
        } else if (choice == exitItem)
        {
            System.exit(0);
        } else if (choice == cutItem)
        {
            pad = textArea.getSelectedText();
            textArea.replaceRange("", textArea.getSelectionStart(), textArea.getSelectionEnd());
        } else if (choice == copyItem)
        {
            pad = textArea.getSelectedText();
        } else if (choice == pasteItem)
        {
            textArea.insert(pad, textArea.getCaretPosition());
        }
        else if (choice == selectItem)
        {
            textArea.selectAll();
        }
        else if (e.getSource() == statusItem)
        {
            //not yet implmented
        }*/


    }

    @Override
    public void insertUpdate(DocumentEvent e)
    {
        String content = textArea.getText();

        if(!content.equals(lastRecordedText))
        {
            lastRecordedText = content;
            model.
        }
    }

    @Override
    public void removeUpdate(DocumentEvent e)
    {

    }

    @Override
    public void changedUpdate(DocumentEvent e)
    {

    }

    @Override
    public void update()
    {

    }


    public static void main(String[] args)
    {
        DocumentModel model = new DocumentModel();
        EditorWindow EditorWindowView = new EditorWindow(model);

        DocumentController controller = new DocumentController(EditorWindowView, model);
        System.out.println("SETUP FINISHED.");
    }



}